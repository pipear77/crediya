dependencies {
    // 🧩 Módulos internos
    implementation project(':model')

    // 🌱 Spring Core & WebFlux
    implementation 'org.springframework:spring-context'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // 🔄 R2DBC & PostgreSQL
    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
    implementation 'org.postgresql:r2dbc-postgresql:1.0.7.RELEASE'
    implementation 'io.r2dbc:r2dbc-pool:1.0.1.RELEASE'
    runtimeOnly 'org.postgresql:postgresql:42.7.1'

    // 🧠 Validación
    implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
    implementation 'org.hibernate.validator:hibernate-validator:8.0.1.Final'

    // 🧪 MapStruct
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

    // 🧰 Utilidades
    implementation 'org.reactivecommons.utils:object-mapper-api:0.1.0'
    implementation 'io.projectreactor:reactor-core'

    // 🧪 Testing
    testImplementation 'org.reactivecommons.utils:object-mapper:0.1.0'

    // 🧵 Lombok
    compileOnly 'org.projectlombok:lombok:1.18.28'
    annotationProcessor 'org.projectlombok:lombok:1.18.28'

    // ❓ JPA API (solo si usas anotaciones como @Entity en DTOs)
    implementation 'jakarta.persistence:jakarta.persistence-api' // Revisa si realmente lo necesitas
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked"
    options.encoding = 'UTF-8'
}
